/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bdstudia;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.swing.JOptionPane;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.Query;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;


/**
 *
 * @author makma
 */
public class RealizacjaZamowienJFrame extends javax.swing.JFrame {

    private SessionFactory factory;
    private Zamowienie z;
    private WynikZamowienia wynik_zamowienia;
    private List<WynikZamowienia> wynik_zamowienia_list;
    
     
    /**
     * Creates new form ZamowieniaJFrame
     */
    
    public RealizacjaZamowienJFrame(SessionFactory factory_ref) {
        this.factory = factory_ref;
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaZnalezionychZamowien = new javax.swing.JList<>();
        SzukajButton = new javax.swing.JButton();
        KryteriumCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        KryteriumET = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ListaZnalezionychZamowien.setModel(new WynikZamowieniaListModel());
        ListaZnalezionychZamowien.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ListaZnalezionychZamowien);

        SzukajButton.setText("Szukaj");
        SzukajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SzukajZamowieniaBtnSzukajHandler(evt);
            }
        });

        KryteriumCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NR Zamowienia", "Imie", "Nazwisko", "Typ Produktu" }));
        KryteriumCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KryteriumCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Kryterium :");

        KryteriumET.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        KryteriumET.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                KryteriumETKeyTyped(evt);
            }
        });

        jButton1.setText("Wybierz Zamówienie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(KryteriumCB, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(KryteriumET, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SzukajButton))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KryteriumCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(KryteriumET, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SzukajButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Wybór Zamowienia", jPanel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 412, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Realizacja", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SzukajZamowieniaBtnSzukajHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SzukajZamowieniaBtnSzukajHandler
        InitList();
    }//GEN-LAST:event_SzukajZamowieniaBtnSzukajHandler

    private void KryteriumETKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KryteriumETKeyTyped
        char c = evt.getKeyChar();
        switch(KryteriumCB.getSelectedIndex()){
            case(0):
            {                
                if(!((c>='0') && (c<='9')))  evt.consume(); 
                break;
            }
            default:
            {               
                if(!(((c>=65)&&(c<=90)) || ((c>=97)&&(c<=122))))  evt.consume();                
            } 
        }
    }//GEN-LAST:event_KryteriumETKeyTyped

    private void KryteriumCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KryteriumCBActionPerformed
        KryteriumET.setText("");
    }//GEN-LAST:event_KryteriumCBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ListaZnalezionychZamowien.getSelectedIndex();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void pokaz_formularz() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PobranieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PobranieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PobranieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PobranieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        RealizacjaZamowienJFrame t = this;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               t.setVisible(true);
            }
        });
    }
    public void InitList(){
        Session sesja = factory.openSession();
        EntityManager em = factory.createEntityManager();
        wynik_zamowienia_list = new ArrayList<WynikZamowienia>();
        switch(KryteriumCB.getSelectedIndex()){
            case(0): // IDzamowienia
            {
                List<Object[]> WynikiOBJ = em.createNativeQuery(
                    "SELECT OKZ.Imie, OKZ.Nazwisko, OKZ.Rodzaj, OKZ.WskaznikRh, p.Typ, OKZ.Ilosc, OKZ.DataZamowienia, OKZ.IDZamowienia "
                    + "FROM ( "
                        + "SELECT OK.Imie, OK.Nazwisko, OK.Rodzaj, OK.WskaznikRh , z.Ilosc, z.IDProduktu, z.DataZamowienia, z.IDZamowienia "
                        + "FROM ( "
                            + "SELECT o.IDOsoby, o.Imie, o.Nazwisko, k.Rodzaj, k.WskaznikRh "
                            + "FROM osoby o INNER JOIN grupykrwi k "
                            + "ON o.IDGrupyKrwi = k.IDGrupyKrwi "
                        + ") AS OK INNER JOIN zamowienia z "
                        + "ON OK.IDOsoby = z.IDOsoby "
                        + "WHERE z.IDZamowienia = "
                        + KryteriumET.getText()
                    + ") AS OKZ INNER JOIN produkty p "
                    + "ON OKZ.IDProduktu = p.IDProduktu"
                ).getResultList();    
                
                for(Object[] w : WynikiOBJ){        
                    WynikZamowienia WZ = new WynikZamowienia(w);
                    wynik_zamowienia_list.add(WZ);                                                            
                }
                break;
            }
            case(1): // Imie
            {
                List<Object[]> WynikiOBJ = em.createNativeQuery(
                    "SELECT OKZ.Imie, OKZ.Nazwisko, OKZ.Rodzaj, OKZ.WskaznikRh, p.Typ, OKZ.Ilosc, OKZ.DataZamowienia, OKZ.IDZamowienia "
                    + "FROM ( "
                        + "SELECT OK.Imie, OK.Nazwisko, OK.Rodzaj, OK.WskaznikRh , z.Ilosc, z.IDProduktu, z.DataZamowienia, z.IDZamowienia "
                        + "FROM ( "
                            + "SELECT o.IDOsoby, o.Imie, o.Nazwisko, k.Rodzaj, k.WskaznikRh "
                            + "FROM osoby o INNER JOIN grupykrwi k "
                            + "ON o.IDGrupyKrwi = k.IDGrupyKrwi "
                            + "WHERE o.Imie LIKE '%"
                            + KryteriumET.getText()
                            +"%' "
                        + ") AS OK INNER JOIN zamowienia z "
                        + "ON OK.IDOsoby = z.IDOsoby "                    
                    + ") AS OKZ INNER JOIN produkty p "
                    + "ON OKZ.IDProduktu = p.IDProduktu"
                )
                .getResultList();
                
                for(Object[] w : WynikiOBJ){        
                    WynikZamowienia WZ = new WynikZamowienia(w);
                    wynik_zamowienia_list.add(WZ);                                                            
                }
                break;
            }
            case(2): // Nazwisko
            {
                List<Object[]> WynikiOBJ = em.createNativeQuery(
                    "SELECT OKZ.Imie, OKZ.Nazwisko, OKZ.Rodzaj, OKZ.WskaznikRh, p.Typ, OKZ.Ilosc, OKZ.DataZamowienia, OKZ.IDZamowienia "
                    + "FROM ( "
                        + "SELECT OK.Imie, OK.Nazwisko, OK.Rodzaj, OK.WskaznikRh , z.Ilosc, z.IDProduktu, z.DataZamowienia, z.IDZamowienia "
                        + "FROM ( "
                            + "SELECT o.IDOsoby, o.Imie, o.Nazwisko, k.Rodzaj, k.WskaznikRh "
                            + "FROM osoby o INNER JOIN grupykrwi k "
                            + "ON o.IDGrupyKrwi = k.IDGrupyKrwi "
                            + "WHERE o.Nazwisko LIKE '%"
                            + KryteriumET.getText()
                            +"%' "
                        + ") AS OK INNER JOIN zamowienia z "
                        + "ON OK.IDOsoby = z.IDOsoby "                    
                    + ") AS OKZ INNER JOIN produkty p "
                    + "ON OKZ.IDProduktu = p.IDProduktu"
                )
                .getResultList();
                
                for(Object[] w : WynikiOBJ){        
                    WynikZamowienia WZ = new WynikZamowienia(w);
                    wynik_zamowienia_list.add(WZ);                                                            
                }
                break;
            }
            case(3): // TypProduktu
            {
                List<Object[]> WynikiOBJ = em.createNativeQuery(
                    "SELECT OKZ.Imie, OKZ.Nazwisko, OKZ.Rodzaj, OKZ.WskaznikRh, p.Typ, OKZ.Ilosc, OKZ.DataZamowienia, OKZ.IDZamowienia "
                    + "FROM ( "
                        + "SELECT OK.Imie, OK.Nazwisko, OK.Rodzaj, OK.WskaznikRh , z.Ilosc, z.IDProduktu, z.DataZamowienia, z.IDZamowienia "
                        + "FROM ( "
                            + "SELECT o.IDOsoby, o.Imie, o.Nazwisko, k.Rodzaj, k.WskaznikRh "
                            + "FROM osoby o INNER JOIN grupykrwi k "
                            + "ON o.IDGrupyKrwi = k.IDGrupyKrwi "                        
                        + ") AS OK INNER JOIN zamowienia z "
                        + "ON OK.IDOsoby = z.IDOsoby "                    
                    + ") AS OKZ INNER JOIN produkty p "
                    + "ON OKZ.IDProduktu = p.IDProduktu "
                    + "WHERE p.Typ LIKE '%"
                    + KryteriumET.getText()
                    +"%'"
                 )
                .getResultList();
                
                for(Object[] w : WynikiOBJ){        
                    WynikZamowienia WZ = new WynikZamowienia(w);
                    wynik_zamowienia_list.add(WZ);                                                            
                }
                break;
            }            
        }
        // 
        ((WynikZamowieniaListModel)
                ListaZnalezionychZamowien.getModel())
                .dodajZamowienia(wynik_zamowienia_list);
        
    }  
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> KryteriumCB;
    private javax.swing.JTextField KryteriumET;
    private javax.swing.JList<String> ListaZnalezionychZamowien;
    private javax.swing.JButton SzukajButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables
}
